var pgnParser = (function () {
    /*
     * Generated by PEG.js 0.8.0.
     * See the file pgn-rules.peg for a grammar.
     * http://pegjs.majda.cz/
     */
    function peg$subclass(child, parent) {
        function ctor() {
            this.constructor = child;
        }

        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }

    function SyntaxError(message, expected, found, offset, line, column) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.offset = offset;
        this.line = line;
        this.column = column;

        this.name = "SyntaxError";
    }

    peg$subclass(SyntaxError, Error);

    function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},

            peg$FAILED = {},

            peg$startRuleFunctions = { pgn: peg$parsepgn },
            peg$startRuleFunction = peg$parsepgn,

            peg$c0 = peg$FAILED,
            peg$c1 = null,
            peg$c2 = function (pw, all) {
                arr = (all ? all : []);
                arr.unshift(pw);
                return arr;
            },
            peg$c3 = function (pb, all) {
                arr = (all ? all : []);
                arr.unshift(pb);
                return arr;
            },
            peg$c4 = function () {
                return [
                    []
                ];
            },
            peg$c5 = function (pw) {
                return pw;
            },
            peg$c6 = function (me, all) {
                last = all[0];
                last.moveNumber = me;
                return all;
            },
            peg$c7 = function (mn, cb, hm, ca, vari, all) {
                arr = (all ? all : []);
                move = {};
                move.turn = 'w';
                move.moveNumber = mn;
                move.notation = hm;
                move.commentBefore = cb;
                move.commentAfter = ca;
                move.variations = (vari ? vari : []);
                arr.unshift(move);
                return arr;
            },
            peg$c8 = function (cb, hm, ca, vari, all) {
                arr = (all ? all : []);
                move = {};
                move.turn = 'b';
                move.notation = hm;
                move.commentBefore = cb;
                move.commentAfter = ca;
                move.variations = (vari ? vari : []);
                arr.unshift(move);
                return arr;
            },
            peg$c9 = "1:0",
            peg$c10 = { type: "literal", value: "1:0", description: "\"1:0\"" },
            peg$c11 = function () {
                return ["1:0"];
            },
            peg$c12 = "0:1",
            peg$c13 = { type: "literal", value: "0:1", description: "\"0:1\"" },
            peg$c14 = function () {
                return ["0:1"];
            },
            peg$c15 = "1/2-1/2",
            peg$c16 = { type: "literal", value: "1/2-1/2", description: "\"1/2-1/2\"" },
            peg$c17 = function () {
                return ["1/2-1/2"];
            },
            peg$c18 = "*",
            peg$c19 = { type: "literal", value: "*", description: "\"*\"" },
            peg$c20 = function () {
                return ["*"];
            },
            peg$c21 = [],
            peg$c22 = /^[^}]/,
            peg$c23 = { type: "class", value: "[^}]", description: "[^}]" },
            peg$c24 = function (cm) {
                return cm.join("").trim();
            },
            peg$c25 = "{",
            peg$c26 = { type: "literal", value: "{", description: "\"{\"" },
            peg$c27 = "}",
            peg$c28 = { type: "literal", value: "}", description: "\"}\"" },
            peg$c29 = function (vari, all, me) {
                arr = (all ? all : []);
                arr.unshift(vari);
                return arr;
            },
            peg$c30 = function (vari, all) {
                arr = (all ? all : []);
                arr.unshift(vari);
                return arr;
            },
            peg$c31 = "(",
            peg$c32 = { type: "literal", value: "(", description: "\"(\"" },
            peg$c33 = ")",
            peg$c34 = { type: "literal", value: ")", description: "\")\"" },
            peg$c35 = ".",
            peg$c36 = { type: "literal", value: ".", description: "\".\"" },
            peg$c37 = function (num) {
                return num;
            },
            peg$c38 = { type: "other", description: "integer" },
            peg$c39 = /^[0-9]/,
            peg$c40 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c41 = function (digits) {
                return makeInteger(digits);
            },
            peg$c42 = " ",
            peg$c43 = { type: "literal", value: " ", description: "\" \"" },
            peg$c44 = function () {
                return '';
            },
            peg$c45 = void 0,
            peg$c46 = function (fig, disc, str, col, row, pr, ch) {
                return (fig ? fig : '') + (disc ? disc : '') + (str ? str : '') + col + row + (ch ? ch : '');
            },
            peg$c47 = function (fig, str, col, row, pr, ch) {
                return (fig ? fig : '') + (str ? str : '') + col + row + (pr ? pr : '') + (ch ? ch : '');
            },
            peg$c48 = "O-O-O",
            peg$c49 = { type: "literal", value: "O-O-O", description: "\"O-O-O\"" },
            peg$c50 = "O-O",
            peg$c51 = { type: "literal", value: "O-O", description: "\"O-O\"" },
            peg$c52 = "+",
            peg$c53 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c54 = "#",
            peg$c55 = { type: "literal", value: "#", description: "\"#\"" },
            peg$c56 = "=",
            peg$c57 = { type: "literal", value: "=", description: "\"=\"" },
            peg$c58 = function (f) {
                return '=' + f;
            },
            peg$c59 = "...",
            peg$c60 = { type: "literal", value: "...", description: "\"...\"" },
            peg$c61 = /^[RNBQK]/,
            peg$c62 = { type: "class", value: "[RNBQK]", description: "[RNBQK]" },
            peg$c63 = /^[a-h]/,
            peg$c64 = { type: "class", value: "[a-h]", description: "[a-h]" },
            peg$c65 = /^[1-8]/,
            peg$c66 = { type: "class", value: "[1-8]", description: "[1-8]" },
            peg$c67 = "x",
            peg$c68 = { type: "literal", value: "x", description: "\"x\"" },

            peg$currPos = 0,
            peg$reportedPos = 0,
            peg$cachedPos = 0,
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
            peg$maxFailPos = 0,
            peg$maxFailExpected = [],
            peg$silentFails = 0,

            peg$result;

        if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }

            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
            return input.substring(peg$reportedPos, peg$currPos);
        }

        function offset() {
            return peg$reportedPos;
        }

        function line() {
            return peg$computePosDetails(peg$reportedPos).line;
        }

        function column() {
            return peg$computePosDetails(peg$reportedPos).column;
        }

        function expected(description) {
            throw peg$buildException(
                null,
                [
                    { type: "other", description: description }
                ],
                peg$reportedPos
            );
        }

        function error(message) {
            throw peg$buildException(message, null, peg$reportedPos);
        }

        function peg$computePosDetails(pos) {
            function advance(details, startPos, endPos) {
                var p, ch;

                for (p = startPos; p < endPos; p++) {
                    ch = input.charAt(p);
                    if (ch === "\n") {
                        if (!details.seenCR) {
                            details.line++;
                        }
                        details.column = 1;
                        details.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        details.line++;
                        details.column = 1;
                        details.seenCR = true;
                    } else {
                        details.column++;
                        details.seenCR = false;
                    }
                }
            }

            if (peg$cachedPos !== pos) {
                if (peg$cachedPos > pos) {
                    peg$cachedPos = 0;
                    peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
                }
                advance(peg$cachedPosDetails, peg$cachedPos, pos);
                peg$cachedPos = pos;
            }

            return peg$cachedPosDetails;
        }

        function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) {
                return;
            }

            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }

            peg$maxFailExpected.push(expected);
        }

        function peg$buildException(message, expected, pos) {
            function cleanupExpected(expected) {
                var i = 1;

                expected.sort(function (a, b) {
                    if (a.description < b.description) {
                        return -1;
                    } else if (a.description > b.description) {
                        return 1;
                    } else {
                        return 0;
                    }
                });

                while (i < expected.length) {
                    if (expected[i - 1] === expected[i]) {
                        expected.splice(i, 1);
                    } else {
                        i++;
                    }
                }
            }

            function buildMessage(expected, found) {
                function stringEscape(s) {
                    function hex(ch) {
                        return ch.charCodeAt(0).toString(16).toUpperCase();
                    }

                    return s
                        .replace(/\\/g, '\\\\')
                        .replace(/"/g, '\\"')
                        .replace(/\x08/g, '\\b')
                        .replace(/\t/g, '\\t')
                        .replace(/\n/g, '\\n')
                        .replace(/\f/g, '\\f')
                        .replace(/\r/g, '\\r')
                        .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) {
                            return '\\x0' + hex(ch);
                        })
                        .replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) {
                            return '\\x' + hex(ch);
                        })
                        .replace(/[\u0180-\u0FFF]/g, function (ch) {
                            return '\\u0' + hex(ch);
                        })
                        .replace(/[\u1080-\uFFFF]/g, function (ch) {
                            return '\\u' + hex(ch);
                        });
                }

                var expectedDescs = new Array(expected.length),
                    expectedDesc, foundDesc, i;

                for (i = 0; i < expected.length; i++) {
                    expectedDescs[i] = expected[i].description;
                }

                expectedDesc = expected.length > 1
                    ? expectedDescs.slice(0, -1).join(", ")
                    + " or "
                    + expectedDescs[expected.length - 1]
                    : expectedDescs[0];

                foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                return "Expected " + expectedDesc + " but " + foundDesc + " found.";
            }

            var posDetails = peg$computePosDetails(pos),
                found = pos < input.length ? input.charAt(pos) : null;

            if (expected !== null) {
                cleanupExpected(expected);
            }

            return new SyntaxError(
                    message !== null ? message : buildMessage(expected, found),
                expected,
                found,
                pos,
                posDetails.line,
                posDetails.column
            );
        }

        function peg$parsepgn() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parsepgnStartWhite();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsepgnBlack();
                if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c2(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsepgnStartBlack();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsepgnWhite();
                    if (s2 === peg$FAILED) {
                        s2 = peg$c1;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c3(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsewhiteSpace();
                    if (s1 === peg$FAILED) {
                        s1 = peg$c1;
                    }
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c4();
                    }
                    s0 = s1;
                }
            }

            return s0;
        }

        function peg$parsepgnStartWhite() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parsewhiteSpace();
            if (s1 === peg$FAILED) {
                s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsepgnWhite();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c5(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsepgnStartBlack() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsewhiteSpace();
            if (s1 === peg$FAILED) {
                s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsemoveEllipse();
                if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsepgnBlack();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c6(s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsepgnWhite() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

            s0 = peg$currPos;
            s1 = peg$parsewhiteSpace();
            if (s1 === peg$FAILED) {
                s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsemoveNumber();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsewhiteSpace();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c1;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsecomment();
                        if (s4 === peg$FAILED) {
                            s4 = peg$c1;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsewhiteSpace();
                            if (s5 === peg$FAILED) {
                                s5 = peg$c1;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsehalfMove();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsewhiteSpace();
                                    if (s7 === peg$FAILED) {
                                        s7 = peg$c1;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsecomment();
                                        if (s8 === peg$FAILED) {
                                            s8 = peg$c1;
                                        }
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parsewhiteSpace();
                                            if (s9 === peg$FAILED) {
                                                s9 = peg$c1;
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parsevariationWhite();
                                                if (s10 === peg$FAILED) {
                                                    s10 = peg$c1;
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parsepgnBlack();
                                                    if (s11 === peg$FAILED) {
                                                        s11 = peg$c1;
                                                    }
                                                    if (s11 !== peg$FAILED) {
                                                        peg$reportedPos = s0;
                                                        s1 = peg$c7(s2, s4, s6, s8, s10, s11);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseendGame();
            }

            return s0;
        }

        function peg$parsepgnBlack() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

            s0 = peg$currPos;
            s1 = peg$parsewhiteSpace();
            if (s1 === peg$FAILED) {
                s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsecomment();
                if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsewhiteSpace();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c1;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsehalfMove();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsewhiteSpace();
                            if (s5 === peg$FAILED) {
                                s5 = peg$c1;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsecomment();
                                if (s6 === peg$FAILED) {
                                    s6 = peg$c1;
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsewhiteSpace();
                                    if (s7 === peg$FAILED) {
                                        s7 = peg$c1;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsevariationBlack();
                                        if (s8 === peg$FAILED) {
                                            s8 = peg$c1;
                                        }
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parsepgnWhite();
                                            if (s9 === peg$FAILED) {
                                                s9 = peg$c1;
                                            }
                                            if (s9 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c8(s2, s4, s6, s8, s9);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseendGame();
            }

            return s0;
        }

        function peg$parseendGame() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c9) {
                s1 = peg$c9;
                peg$currPos += 3;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c10);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c11();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c12) {
                    s1 = peg$c12;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c13);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c14();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 7) === peg$c15) {
                        s1 = peg$c15;
                        peg$currPos += 7;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c16);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c17();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 42) {
                            s1 = peg$c18;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c19);
                            }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c20();
                        }
                        s0 = s1;
                    }
                }
            }

            return s0;
        }

        function peg$parsecomment() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsecl();
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c22.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c23);
                    }
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c22.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c23);
                            }
                        }
                    }
                } else {
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsecr();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c24(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsecl() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 123) {
                s0 = peg$c25;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c26);
                }
            }

            return s0;
        }

        function peg$parsecr() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 125) {
                s0 = peg$c27;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c28);
                }
            }

            return s0;
        }

        function peg$parsevariationWhite() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            s0 = peg$currPos;
            s1 = peg$parsepl();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsepgnWhite();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsepr();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewhiteSpace();
                        if (s4 === peg$FAILED) {
                            s4 = peg$c1;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsevariationWhite();
                            if (s5 === peg$FAILED) {
                                s5 = peg$c1;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsewhiteSpace();
                                if (s6 === peg$FAILED) {
                                    s6 = peg$c1;
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsemoveEllipse();
                                    if (s7 === peg$FAILED) {
                                        s7 = peg$c1;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c29(s2, s5, s7);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsevariationBlack() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parsepl();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsepgnStartBlack();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsepr();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewhiteSpace();
                        if (s4 === peg$FAILED) {
                            s4 = peg$c1;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsevariationBlack();
                            if (s5 === peg$FAILED) {
                                s5 = peg$c1;
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c30(s2, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsepl() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 40) {
                s0 = peg$c31;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c32);
                }
            }

            return s0;
        }

        function peg$parsepr() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 41) {
                s0 = peg$c33;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c34);
                }
            }

            return s0;
        }

        function peg$parsemoveNumber() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parseinteger();
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (input.charCodeAt(peg$currPos) === 46) {
                    s3 = peg$c35;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c36);
                    }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s3 = peg$c35;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c36);
                        }
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c37(s1);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseinteger() {
            var s0, s1, s2;

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            if (peg$c39.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c40);
                }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c39.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c40);
                        }
                    }
                }
            } else {
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c41(s1);
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c38);
                }
            }

            return s0;
        }

        function peg$parsewhiteSpace() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = [];
            if (input.charCodeAt(peg$currPos) === 32) {
                s2 = peg$c42;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c43);
                }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (input.charCodeAt(peg$currPos) === 32) {
                        s2 = peg$c42;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c43);
                        }
                    }
                }
            } else {
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c44();
            }
            s0 = s1;

            return s0;
        }

        function peg$parsehalfMove() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;

            s0 = peg$currPos;
            s1 = peg$parsefigure();
            if (s1 === peg$FAILED) {
                s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parsecheckdisc();
                peg$silentFails--;
                if (s3 !== peg$FAILED) {
                    peg$currPos = s2;
                    s2 = peg$c45;
                } else {
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsediscriminator();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsestrike();
                        if (s4 === peg$FAILED) {
                            s4 = peg$c1;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsecolumn();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parserow();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsepromotion();
                                    if (s7 === peg$FAILED) {
                                        s7 = peg$c1;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsecheck();
                                        if (s8 === peg$FAILED) {
                                            s8 = peg$c1;
                                        }
                                        if (s8 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c46(s1, s3, s4, s5, s6, s7, s8);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsefigure();
                if (s1 === peg$FAILED) {
                    s1 = peg$c1;
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsestrike();
                    if (s2 === peg$FAILED) {
                        s2 = peg$c1;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsecolumn();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parserow();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsepromotion();
                                if (s5 === peg$FAILED) {
                                    s5 = peg$c1;
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsecheck();
                                    if (s6 === peg$FAILED) {
                                        s6 = peg$c1;
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c47(s1, s2, s3, s4, s5, s6);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c48) {
                        s0 = peg$c48;
                        peg$currPos += 5;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c49);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c50) {
                            s0 = peg$c50;
                            peg$currPos += 3;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c51);
                            }
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parsecheck() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 43) {
                s0 = peg$c52;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c53);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 35) {
                    s0 = peg$c54;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c55);
                    }
                }
            }

            return s0;
        }

        function peg$parsepromotion() {
            var s0, s1, s2;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 61) {
                s1 = peg$c56;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c57);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsefigure();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c58(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsediscriminator() {
            var s0;

            s0 = peg$parsecolumn();
            if (s0 === peg$FAILED) {
                s0 = peg$parserow();
            }

            return s0;
        }

        function peg$parsecheckdisc() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$parsediscriminator();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsestrike();
                if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsecolumn();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parserow();
                        if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsemoveEllipse() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parseinteger();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c59) {
                    s2 = peg$c59;
                    peg$currPos += 3;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c60);
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c37(s1);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsefigure() {
            var s0;

            if (peg$c61.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c62);
                }
            }

            return s0;
        }

        function peg$parsecolumn() {
            var s0;

            if (peg$c63.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c64);
                }
            }

            return s0;
        }

        function peg$parserow() {
            var s0;

            if (peg$c65.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c66);
                }
            }

            return s0;
        }

        function peg$parsestrike() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 120) {
                s0 = peg$c67;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c68);
                }
            }

            return s0;
        }


        function makeInteger(o) {
            return parseInt(o.join(""), 10);
        }


        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
        } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                peg$fail({ type: "end", description: "end of input" });
            }

            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
    }

    return {
        SyntaxError: SyntaxError,
        parse: parse
    };
})();